/*
 * Crosscheck Browserless Javascript Testing Framework.
 * 
 * Copyright 2006/2007 The Frontside Software, Inc
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 	http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * If you have any questions, please contact The Frontside Software, Inc
 * crosscheck@thefrontside.net
 * http://thefrontside.net
 */
 crosscheck.suite("Core DOM", {
	test_location_set_hash: function() {
		location.hash = '#hello';
		assertEquals('#hello', location.hash);
		assertEquals(location.protocol + '//' + location.hostname + location.pathname + '#hello', location);
	},
    test_height_properties: function() {
       var elem = document.createElement('div');
       elem.style.height = '20px';
       assertEquals('20px', elem.style.height);
       assertEquals(0, elem.clientHeight);
       assertEquals(0, elem.offsetHeight);

       document.body.appendChild(elem)
       assertEquals(20, elem.clientHeight);
       assertEquals(20, elem.offsetHeight);
    },
    test_width_properties: function() {
       var elem = document.createElement('div');
       elem.style.width = '20px';
       assertEquals('20px', elem.style.width);
       assertEquals(0, elem.clientWidth);
       assertEquals(0, elem.offsetWidth);

       document.body.appendChild(elem)
       assertEquals(20, elem.clientWidth);
       assertEquals(20, elem.offsetWidth);
    },
    test_adding_listener_within_a_listener: function() {
       var count = 0;
       var listener = function() {
          count++;
          crosscheck.Host.addEventListener(document, 'click', function() { count++; }, false);
       };
       crosscheck.Host.addEventListener(document, 'click', listener, false);

       crosscheck.Host.click(document);
       assertEquals(1, count);

       crosscheck.Host.click(document);
       assertEquals(3, count);
    },

    test_splitText_maintains_correct_child_order: function() {
       var parent = document.createElement('div');
       var original = document.createTextNode('onetwo');
       parent.appendChild(original);

       var result = original.splitText(3);
       assertEquals(original, parent.firstChild);
       assertEquals(result, parent.lastChild);
    },

    test_splitText: function() {
       var original = document.createTextNode('onetwo');

       var result = original.splitText(0)

       assertEquals('', original.data)
       assertEquals('onetwo', result.data)

       original = result
       result = original.splitText(3)
       assertEquals('one', original.data)
       assertEquals('two', result.data)

       original = result
       result = original.splitText(3)
       assertEquals('two', original.data)
       assertEquals('', result.data)
    },

    test_splitText_appends_new_node_to_parent: function() {
       var parent = document.createElement('div');
       var original = parent.appendChild(document.createTextNode('onetwo'))
       var result = original.splitText(3)

       assertEquals(parent, original.parentNode)
       assertEquals(parent, result.parentNode)
    },

    test_offsetParent: function() {
       var html = crosscheck.Host.parse(
          '<div id="wrapper">' +
          '  <div><span id="static"></span></div>' +
          '  <div style="position:absolute"><span id="abs"><span id="descendant"></span></span></div>' +
          '  <div style="position:relative"><span id="rel"></span></div>' +
          '</div>'
       )
       document.body.appendChild(html)

       assertNull(document.documentElement.offsetParent)
       assertNull(document.getElementsByTagName('HEAD')[0].offsetParent)
       assertNull(document.body.offsetParent)

       var wrapper = document.getElementById('wrapper')
       assertEquals(document.body, wrapper.offsetParent)

       var stat = document.getElementById('static')
       assertEquals(document.body, stat.offsetParent)

       var rel = document.getElementById('rel')
       assertEquals(rel.parentNode, rel.offsetParent)

       var abs = document.getElementById('abs')
       assertEquals(abs.parentNode, abs.offsetParent)

       var desc = document.getElementById('descendant')
       assertEquals(abs.parentNode, desc.offsetParent)
    },

    test_insertBefore_with_null_reference_node: function() {
       var element = document.createElement('div');
       element.insertBefore(document.createElement('span'), null);
       assertTrue(1, element.childNodes.length);
    },

    test_insertBefore_appends_with_null_reference_node: function() {
       var element = document.createElement('div');
       var first = element.appendChild(document.createElement('span'));

       var next = element.insertBefore(document.createElement('span'), null);
       assertEquals(first, element.firstChild);
       assertEquals(next, element.lastChild);
    },

    test_default_document_structure: function() {
       var docElement = document.documentElement;
       assertEquals(2, docElement.childNodes.length)
       assertEquals('HEAD', docElement.childNodes[0].nodeName)
       assertEquals('BODY', docElement.childNodes[1].nodeName)
    },

    test_attributes_are_available_via_index: function() {
       var source = crosscheck.Host.parse("<div we='await' silent='tristeros' empire='' />");
       assertEquals(3, source.attributes.length);

       var attr0 = source.attributes.item(0);
       var attr1 = source.attributes.item(1);

       assertEquals(attr0, source.attributes[0]);
       assertEquals(attr1, source.attributes[1]);
    },

    test_childNodes_are_available_via_index: function() {
       var source = crosscheck.Host.parse("<div><span/><span/></div>");
       assertEquals(2, source.childNodes.length);

       var child0 = source.childNodes.item(0);
       var child1 = source.childNodes.item(1);

       assertEquals(child0, source.childNodes[0]);
       assertEquals(child1, source.childNodes[1]);

       var child2 = source.appendChild(document.createElement('input'));
       assertEquals(child2, source.childNodes[2]);

       var child3 = source.insertBefore(document.createElement('input'), child2);
       assertEquals(child3, source.childNodes[2]);
       assertEquals(child2, source.childNodes[3]);

       var child4 = source.replaceChild(document.createElement('input'), child0);
       assertEquals(child4, source.childNodes[0]);

       source.removeChild(child2);
       assertNotDefined(source.childNodes[3]);
    },

    test_cloneNode_shallow: function() {
       var source = crosscheck.Host.parse(
          "<div id='wicker' style='margin-right:10px; border: 10px solid #F00;'>" +
             "<!--comment-->" +
             "<span><strong>man</strong></span>" +
          "</div>");
       document.documentElement.appendChild(source);

       var clone = source.cloneNode(false);
       assertNotNull(clone);
       assertNotEquals(source, clone);
       this.assertNode(clone, null, 'DIV', crosscheck.html.ELEMENT_NODE, source.ownerDocument, null, 0);
       assertEquals('wicker', clone.id);
       assertEquals('10px', clone.style.marginRight);
       assertEquals('10px solid #F00', clone.style.border);
    },

    test_cloneNode_deep: function() {
       var source = crosscheck.Host.parse(
          "<div id='wicker' style='margin-right:10px; border: 10px solid #F00;'>" +
             "<!--comment-->" +
             "<span><strong>man</strong></span>" +
          "</div>");
       document.documentElement.appendChild(source);

       var clone = source.cloneNode(true);
       assertNotNull(clone);
       assertNotEquals(source, clone);
       this.assertNode(clone, null, 'DIV', crosscheck.html.ELEMENT_NODE, source.ownerDocument, null, 2);
       assertEquals('wicker', clone.id);
       assertEquals('10px', clone.style.marginRight);
       assertEquals('10px solid #F00', clone.style.border);

       var comment = clone.childNodes.item(0);
       this.assertNode(comment, clone, '#comment', crosscheck.html.COMMENT_NODE, source.ownerDocument, 'comment', 0);
       assertEquals('comment', comment.data);

       var span = clone.childNodes.item(1);
       this.assertNode(span, clone, 'SPAN', crosscheck.html.ELEMENT_NODE, source.ownerDocument, null, 1);

       var strong = span.childNodes.item(0);
       this.assertNode(strong, span, 'STRONG', crosscheck.html.ELEMENT_NODE, source.ownerDocument, null, 1);

       var text = strong.childNodes.item(0);
       this.assertNode(text, strong, '#text', crosscheck.html.TEXT_NODE, source.ownerDocument, 'man', 0);
    },

    test_getElementsByName: function() {
       var div1 = document.documentElement.appendChild(document.createElement('div'));
       div1.appendChild(document.createElement('span'));
       var div2 = div1.appendChild(document.createElement('div'));
       div1.appendChild(document.createElement('span'));
       var span1 = div1.appendChild(document.createElement('span'));
       var div3 = span1.appendChild(document.createElement('div'));
       var div4 = div3.appendChild(document.createElement('div'));

       document.documentElement.setAttribute('name', 'bob');
       div1.setAttribute('name', 'bob');
       div4.setAttribute('name', 'bob');

       var list = document.getElementsByName('bob');
       assertEquals(3, list.length)
       assertEquals(document.documentElement, list.item(0))
       assertEquals(div1, list.item(1))
       assertEquals(div4, list.item(2))
    },
    test_removeAttribute: function() {
       document.body.setAttribute('name', 'bob');
       assertEquals('bob', document.body.getAttribute('name'));
       document.body.removeAttribute('name');
       assertNull(document.body.getAttribute('name'));
    },

    test_getElementsByTagName: function() {
       var div1 = document.documentElement.appendChild(document.createElement('div'));
       div1.appendChild(document.createElement('span'));
       var div2 = div1.appendChild(document.createElement('div'));
       div1.appendChild(document.createElement('span'));
       var span1 = div1.appendChild(document.createElement('span'));
       var div3 = span1.appendChild(document.createElement('div'));
       var div4 = div3.appendChild(document.createElement('div'));

       var list = document.getElementsByTagName('DIV');

       assertEquals(4, list.length);
       assertEquals(div1, list.item(0));
       assertEquals(div2, list.item(1));
       assertEquals(div3, list.item(2));
       assertEquals(div4, list.item(3));

       list = div1.getElementsByTagName('DIV');

       assertEquals(3, list.length);
       assertEquals(div2, list.item(0));
       assertEquals(div3, list.item(1));
       assertEquals(div4, list.item(2));
    },

    test_getElementById: function() {
       document.documentElement.id = 'bob';

       var div1 = document.documentElement.appendChild(document.createElement('div'));
       div1.appendChild(document.createElement('span'));
       var div2 = div1.appendChild(document.createElement('div'));
       div2.id = 'dave'

       assertEquals(document.documentElement, document.getElementById('bob'));
       assertEquals(div2, document.getElementById('dave'));
    },

    test_default_document_properties: function() {
       //properties defined on Node
       assertEquals('#document', document.nodeName);
       assertNull(document.nodeValue);
       assertEquals(crosscheck.html.DOCUMENT_NODE, document.nodeType);
       assertNull(document.parentNode);

       assertNotNull(document.childNodes);
       assertEquals(1, document.childNodes.length);
       assertEquals('HTML', document.childNodes.item(0).nodeName);

       assertEquals(document.childNodes.item(0), document.firstChild);
       assertEquals(document.firstChild, document.lastChild);
       assertNull(document.previousSibling);
       assertNull(document.nextSibling);
       assertNull(document.attributes);
       assertNull(document.ownerDocument);

       //properties defined on Document
       assertNull(document.doctype);
       assertEquals(document.firstChild, document.documentElement);
    },

    test_document_createAttribute: function() {
       var attr = document.createAttribute('name');
       assertEquals('name', attr.name);
       assertEquals('', attr.value);
       assertEquals(document, attr.ownerDocument);
    },

    test_document_createComment: function() {
       var comment = document.createComment('test comment');
       assertEquals('test comment', comment.data);
       assertEquals(document, comment.ownerDocument);
    },

    test_document_createTextNode: function() {
       var text = document.createTextNode('bargain with the raisin girl');
       assertEquals('bargain with the raisin girl'.length, text.length);
       assertEquals('bargain with the raisin girl', text.data);
       assertEquals('bargain with the raisin girl', text.nodeValue);
       assertEquals(document, text.ownerDocument);
    },

    test_document_createElement: function() {
       var element = document.createElement('div');
       assertEquals('DIV', element.nodeName);
       assertEquals(document, element.ownerDocument);
    },

    test_document_createElement_without_name: function() {
       assertError(function() { document.createElement(); }, '');
    },

    test_default_element_properties: function() {
       var element = document.createElement('div');
       assertEquals(crosscheck.html.ELEMENT_NODE, element.nodeType);
       assertEquals('DIV', element.nodeName);
       assertEquals(null, element.nodeValue);

       //properties defined on Node
       assertEquals('DIV', element.nodeName);
       assertNull(element.nodeValue);
       assertEquals(crosscheck.html.ELEMENT_NODE, element.nodeType);
       assertNull(element.parentNode);

       assertNotNull(element.childNodes);
       assertEquals(0, element.childNodes.length);

       assertNull(element.firstChild);
       assertNull(element.lastChild);
       assertNull(element.previousSibling);
       assertNull(element.nextSibling);
       assertEquals(0, element.attributes.length);
       assertEquals(document, element.ownerDocument);

       //properties defined on Element
       assertEquals(element.nodeName, element.tagName);
    },

    test_appendChild: function() {
       var parent = document.createElement('div');
       var child = parent.appendChild(document.createElement('span'));

       assertEquals(parent, child.parentNode);
       assertTrue(parent.hasChildNodes);
       assertEquals(child, parent.firstChild);
       assertEquals(child, parent.lastChild);
       assertEquals(1, parent.childNodes.length);
       assertEquals(child, parent.childNodes.item(0));
    },

    test_appendChild_with_Document_Fragment: function() {
       var parent = document.createElement('div')
       var one = document.createElement('div')
       var two = document.createElement('div')
       var three = document.createElement('div')

       var fragment = document.createDocumentFragment()
       fragment.appendChild(one)
       fragment.appendChild(two)
       fragment.appendChild(three)
       parent.appendChild(fragment)

       assertEquals(3, parent.childNodes.length)
       assertEquals(one, parent.firstChild)
       assertEquals(two, parent.childNodes.item(1))
       assertEquals(three, parent.lastChild)

       assertEquals(0, fragment.childNodes.length)
    },

    test_appendChild_from_wrong_document_causes_error: function() {
       var parent = document.createElement('div');
       var child = crosscheck.Host.parseXML('<span/>').documentElement;
       assertError(function() {parent.appendChild(child);});
    },

    test_insertBefore: function() {
       var parent = document.createElement('div');
       var refChild = parent.appendChild(document.createElement('span'));
       var lastChild = parent.appendChild(document.createElement('span'));
       var newChild = document.createElement('strong');

       var result = parent.insertBefore(newChild, refChild);
       assertEquals(newChild, result);

       assertEquals(3, parent.childNodes.length);
       assertEquals(newChild, parent.childNodes.item(0));
       assertEquals(refChild, parent.childNodes.item(1));
       assertEquals(lastChild, parent.childNodes.item(2));

       assertEquals(parent, newChild.parentNode);
    },

    test_insertBefore_with_a_DocumentFragment: function() {
       var parent = document.createElement('div')
       var fragment = document.createDocumentFragment()
       var one = document.createElement('div')
       var two = document.createElement('div')
       var three = document.createElement('div')
       fragment.appendChild(one)
       fragment.appendChild(two)
       fragment.appendChild(three)

       var ref = document.createElement('div')
       parent.appendChild(ref)
       parent.insertBefore(fragment, ref)
       assertEquals(4, parent.childNodes.length)
       assertEquals(one, parent.firstChild)
       assertEquals(two, parent.childNodes.item(1))
       assertEquals(three, parent.childNodes.item(2))
       assertEquals(ref, parent.lastChild)

       assertEquals(0, fragment.childNodes.length)
    },

    test_removeChild: function() {
       var parent = document.createElement('div');
       var child1 = parent.appendChild(document.createElement('span'));
       var child2 = parent.appendChild(document.createElement('span'));
       var child3 = parent.appendChild(document.createElement('span'));

       var result = parent.removeChild(child2);
       assertEquals(child2, result);

       assertEquals(2, parent.childNodes.length);
       assertEquals(child1, parent.childNodes.item(0));
       assertEquals(child3, parent.childNodes.item(1));

       assertNull(child2.parentNode);
    },

    test_adding_a_child_to_a_different_node_removes_that_child_from_its_child_list: function() {
       var mother = document.createElement('div')
       var father = document.createElement('div')
       var johnBoy = document.createElement('div')
       var maryJoe = document.createElement('div')
       mother.appendChild(johnBoy)
       mother.appendChild(maryJoe)
       father.appendChild(johnBoy)
       father.insertBefore(maryJoe, johnBoy)
       assertEquals(maryJoe, father.firstChild)
       assertEquals(johnBoy, father.lastChild)
       assertEquals(0, mother.childNodes.length)
    },


    test_replaceChild: function() {
       var parent = document.createElement('div');
       var child1 = parent.appendChild(document.createElement('span'));
       var child2 = parent.appendChild(document.createElement('span'));
       var child3 = parent.appendChild(document.createElement('span'));
       var replacement = document.createElement('span');

       var result = parent.replaceChild(replacement, child2);
       assertEquals(replacement, result);

       assertEquals(3, parent.childNodes.length);
       assertEquals(child1, parent.childNodes.item(0));
       assertEquals(replacement, parent.childNodes.item(1));
       assertEquals(child3, parent.childNodes.item(2));

       assertNull(child2.parentNode);
       assertEquals(parent, replacement.parentNode);
    },

    test_nextSibling: function() {
       var parent = document.createElement('div');
       var child1 = parent.appendChild(document.createElement('span'));
       var child2 = parent.appendChild(document.createElement('p'));
       var child3 = parent.appendChild(document.createElement('em'));

       assertEquals(child2, child1.nextSibling);
       assertEquals(child3, child2.nextSibling);
       assertEquals(null, child3.nextSibling);
    },

    test_setting_innerHTML_element: function() {
       var div = document.createElement('DIV');

       div.innerHTML = '<span>sub-text</span>';
       assertEquals(1, div.childNodes.length);
       assertEquals(crosscheck.html.ELEMENT_NODE, div.childNodes[0].nodeType);
       assertEquals('SPAN', div.childNodes[0].nodeName);
       assertEquals('sub-text', div.childNodes[0].innerHTML);
    },

    test_setting_innerHTML_text: function() {
       var div = document.createElement('DIV');

       div.innerHTML = 'text';
       assertEquals(1, div.childNodes.length);
       assertEquals(crosscheck.html.TEXT_NODE, div.childNodes[0].nodeType);
       assertEquals('text', div.childNodes[0].data);
    },

    test_append_to_innerHTML: function() {
       var div = document.createElement('DIV');
       div.innerHTML = 'text';
       div.innerHTML += '<span>sub-text</span>';

       assertEquals(2, div.childNodes.length);

       assertEquals(crosscheck.html.TEXT_NODE, div.childNodes[0].nodeType);
       assertEquals('text', div.childNodes[0].data);

       assertEquals(crosscheck.html.ELEMENT_NODE, div.childNodes[1].nodeType);
       assertEquals('SPAN', div.childNodes[1].nodeName);
       assertEquals('sub-text', div.childNodes[1].innerHTML);
    },

    test_get_innerHTML: function() {
       var div = document.createElement('DIV');
       var span = div.appendChild(document.createElement('SPAN'));
       span.id = "sparkly";
       span.setAttribute('sparkle', 'true');
       var comment = div.appendChild(document.createComment('nice tan'));
       var text = div.appendChild(document.createTextNode('lorem ipsum'));
       var ul = div.appendChild(document.createElement('UL'));
       ul.appendChild(document.createElement('LI'));
       ul.appendChild(document.createElement('LI'));

       assertEquals(
          '<span id="sparkly" sparkle="true"/>' +
          '<!--nice tan-->' +
          'lorem ipsum' +
          '<ul>' +
          '<li/>' +
          '<li/>' +
          '</ul>', div.innerHTML);
    },

    assertNode: function(node, parentNode, nodeName, nodeType, ownerDocument, nodeValue, childCount) {
       assertEquals(parentNode, node.parentNode);
       assertEquals(nodeName, node.nodeName);
       assertEquals(nodeType, node.nodeType);
       assertEquals(ownerDocument, node.ownerDocument);
       assertEquals(nodeValue, node.nodeValue);
       assertEquals(childCount, node.childNodes.length);
    }
});
